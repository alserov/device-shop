// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/alserov/device-shop/collection-service/internal/db/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCollectionRepo is a mock of CollectionRepo interface.
type MockCollectionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionRepoMockRecorder
}

// MockCollectionRepoMockRecorder is the mock recorder for MockCollectionRepo.
type MockCollectionRepoMockRecorder struct {
	mock *MockCollectionRepo
}

// NewMockCollectionRepo creates a new mock instance.
func NewMockCollectionRepo(ctrl *gomock.Controller) *MockCollectionRepo {
	mock := &MockCollectionRepo{ctrl: ctrl}
	mock.recorder = &MockCollectionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionRepo) EXPECT() *MockCollectionRepoMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCollectionRepo) AddToCart(ctx context.Context, userUUID string, device models.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", ctx, userUUID, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCollectionRepoMockRecorder) AddToCart(ctx, userUUID, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCollectionRepo)(nil).AddToCart), ctx, userUUID, device)
}

// AddToFavourite mocks base method.
func (m *MockCollectionRepo) AddToFavourite(ctx context.Context, userUUID string, device models.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToFavourite", ctx, userUUID, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToFavourite indicates an expected call of AddToFavourite.
func (mr *MockCollectionRepoMockRecorder) AddToFavourite(ctx, userUUID, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToFavourite", reflect.TypeOf((*MockCollectionRepo)(nil).AddToFavourite), ctx, userUUID, device)
}

// GetCart mocks base method.
func (m *MockCollectionRepo) GetCart(ctx context.Context, userUUID string) ([]*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", ctx, userUUID)
	ret0, _ := ret[0].([]*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockCollectionRepoMockRecorder) GetCart(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockCollectionRepo)(nil).GetCart), ctx, userUUID)
}

// GetFavourite mocks base method.
func (m *MockCollectionRepo) GetFavourite(ctx context.Context, userUUID string) ([]*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavourite", ctx, userUUID)
	ret0, _ := ret[0].([]*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavourite indicates an expected call of GetFavourite.
func (mr *MockCollectionRepoMockRecorder) GetFavourite(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavourite", reflect.TypeOf((*MockCollectionRepo)(nil).GetFavourite), ctx, userUUID)
}

// RemoveDeviceFromCollections mocks base method.
func (m *MockCollectionRepo) RemoveDeviceFromCollections(ctx context.Context, deviceUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeviceFromCollections", ctx, deviceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDeviceFromCollections indicates an expected call of RemoveDeviceFromCollections.
func (mr *MockCollectionRepoMockRecorder) RemoveDeviceFromCollections(ctx, deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeviceFromCollections", reflect.TypeOf((*MockCollectionRepo)(nil).RemoveDeviceFromCollections), ctx, deviceUUID)
}

// RemoveFromCart mocks base method.
func (m *MockCollectionRepo) RemoveFromCart(ctx context.Context, userUUID, deviceUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", ctx, userUUID, deviceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCollectionRepoMockRecorder) RemoveFromCart(ctx, userUUID, deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCollectionRepo)(nil).RemoveFromCart), ctx, userUUID, deviceUUID)
}

// RemoveFromFavourite mocks base method.
func (m *MockCollectionRepo) RemoveFromFavourite(ctx context.Context, userUUID, deviceUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromFavourite", ctx, userUUID, deviceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromFavourite indicates an expected call of RemoveFromFavourite.
func (mr *MockCollectionRepoMockRecorder) RemoveFromFavourite(ctx, userUUID, deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromFavourite", reflect.TypeOf((*MockCollectionRepo)(nil).RemoveFromFavourite), ctx, userUUID, deviceUUID)
}

// MockCartActions is a mock of CartActions interface.
type MockCartActions struct {
	ctrl     *gomock.Controller
	recorder *MockCartActionsMockRecorder
}

// MockCartActionsMockRecorder is the mock recorder for MockCartActions.
type MockCartActionsMockRecorder struct {
	mock *MockCartActions
}

// NewMockCartActions creates a new mock instance.
func NewMockCartActions(ctrl *gomock.Controller) *MockCartActions {
	mock := &MockCartActions{ctrl: ctrl}
	mock.recorder = &MockCartActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartActions) EXPECT() *MockCartActionsMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartActions) AddToCart(ctx context.Context, userUUID string, device models.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", ctx, userUUID, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartActionsMockRecorder) AddToCart(ctx, userUUID, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartActions)(nil).AddToCart), ctx, userUUID, device)
}

// GetCart mocks base method.
func (m *MockCartActions) GetCart(ctx context.Context, userUUID string) ([]*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", ctx, userUUID)
	ret0, _ := ret[0].([]*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockCartActionsMockRecorder) GetCart(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockCartActions)(nil).GetCart), ctx, userUUID)
}

// RemoveFromCart mocks base method.
func (m *MockCartActions) RemoveFromCart(ctx context.Context, userUUID, deviceUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", ctx, userUUID, deviceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCartActionsMockRecorder) RemoveFromCart(ctx, userUUID, deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCartActions)(nil).RemoveFromCart), ctx, userUUID, deviceUUID)
}

// MockFavouriteActions is a mock of FavouriteActions interface.
type MockFavouriteActions struct {
	ctrl     *gomock.Controller
	recorder *MockFavouriteActionsMockRecorder
}

// MockFavouriteActionsMockRecorder is the mock recorder for MockFavouriteActions.
type MockFavouriteActionsMockRecorder struct {
	mock *MockFavouriteActions
}

// NewMockFavouriteActions creates a new mock instance.
func NewMockFavouriteActions(ctrl *gomock.Controller) *MockFavouriteActions {
	mock := &MockFavouriteActions{ctrl: ctrl}
	mock.recorder = &MockFavouriteActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavouriteActions) EXPECT() *MockFavouriteActionsMockRecorder {
	return m.recorder
}

// AddToFavourite mocks base method.
func (m *MockFavouriteActions) AddToFavourite(ctx context.Context, userUUID string, device models.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToFavourite", ctx, userUUID, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToFavourite indicates an expected call of AddToFavourite.
func (mr *MockFavouriteActionsMockRecorder) AddToFavourite(ctx, userUUID, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToFavourite", reflect.TypeOf((*MockFavouriteActions)(nil).AddToFavourite), ctx, userUUID, device)
}

// GetFavourite mocks base method.
func (m *MockFavouriteActions) GetFavourite(ctx context.Context, userUUID string) ([]*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavourite", ctx, userUUID)
	ret0, _ := ret[0].([]*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavourite indicates an expected call of GetFavourite.
func (mr *MockFavouriteActionsMockRecorder) GetFavourite(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavourite", reflect.TypeOf((*MockFavouriteActions)(nil).GetFavourite), ctx, userUUID)
}

// RemoveFromFavourite mocks base method.
func (m *MockFavouriteActions) RemoveFromFavourite(ctx context.Context, userUUID, deviceUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromFavourite", ctx, userUUID, deviceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromFavourite indicates an expected call of RemoveFromFavourite.
func (mr *MockFavouriteActionsMockRecorder) RemoveFromFavourite(ctx, userUUID, deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromFavourite", reflect.TypeOf((*MockFavouriteActions)(nil).RemoveFromFavourite), ctx, userUUID, deviceUUID)
}
