// Code generated by MockGen. DO NOT EDIT.
// Source: proto/gen/order/order_grpc.pb.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	reflect "reflect"

	order "github.com/alserov/device-shop/proto/gen/order"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockOrdersClient is a mock of OrdersClient interface.
type MockOrdersClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersClientMockRecorder
}

// MockOrdersClientMockRecorder is the mock recorder for MockOrdersClient.
type MockOrdersClientMockRecorder struct {
	mock *MockOrdersClient
}

// NewMockOrdersClient creates a new mock instance.
func NewMockOrdersClient(ctrl *gomock.Controller) *MockOrdersClient {
	mock := &MockOrdersClient{ctrl: ctrl}
	mock.recorder = &MockOrdersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersClient) EXPECT() *MockOrdersClientMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockOrdersClient) CancelOrder(ctx context.Context, in *order.CancelOrderReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelOrder", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrdersClientMockRecorder) CancelOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrdersClient)(nil).CancelOrder), varargs...)
}

// CheckOrder mocks base method.
func (m *MockOrdersClient) CheckOrder(ctx context.Context, in *order.CheckOrderReq, opts ...grpc.CallOption) (*order.CheckOrderRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckOrder", varargs...)
	ret0, _ := ret[0].(*order.CheckOrderRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrder indicates an expected call of CheckOrder.
func (mr *MockOrdersClientMockRecorder) CheckOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrder", reflect.TypeOf((*MockOrdersClient)(nil).CheckOrder), varargs...)
}

// CreateOrder mocks base method.
func (m *MockOrdersClient) CreateOrder(ctx context.Context, in *order.CreateOrderReq, opts ...grpc.CallOption) (*order.CreateOrderRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrder", varargs...)
	ret0, _ := ret[0].(*order.CreateOrderRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersClientMockRecorder) CreateOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrdersClient)(nil).CreateOrder), varargs...)
}

// UpdateOrder mocks base method.
func (m *MockOrdersClient) UpdateOrder(ctx context.Context, in *order.UpdateOrderReq, opts ...grpc.CallOption) (*order.UpdateOrderRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrder", varargs...)
	ret0, _ := ret[0].(*order.UpdateOrderRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrdersClientMockRecorder) UpdateOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrdersClient)(nil).UpdateOrder), varargs...)
}

// MockOrdersServer is a mock of OrdersServer interface.
type MockOrdersServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersServerMockRecorder
}

// MockOrdersServerMockRecorder is the mock recorder for MockOrdersServer.
type MockOrdersServerMockRecorder struct {
	mock *MockOrdersServer
}

// NewMockOrdersServer creates a new mock instance.
func NewMockOrdersServer(ctrl *gomock.Controller) *MockOrdersServer {
	mock := &MockOrdersServer{ctrl: ctrl}
	mock.recorder = &MockOrdersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersServer) EXPECT() *MockOrdersServerMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockOrdersServer) CancelOrder(arg0 context.Context, arg1 *order.CancelOrderReq) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrdersServerMockRecorder) CancelOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrdersServer)(nil).CancelOrder), arg0, arg1)
}

// CheckOrder mocks base method.
func (m *MockOrdersServer) CheckOrder(arg0 context.Context, arg1 *order.CheckOrderReq) (*order.CheckOrderRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrder", arg0, arg1)
	ret0, _ := ret[0].(*order.CheckOrderRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrder indicates an expected call of CheckOrder.
func (mr *MockOrdersServerMockRecorder) CheckOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrder", reflect.TypeOf((*MockOrdersServer)(nil).CheckOrder), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockOrdersServer) CreateOrder(arg0 context.Context, arg1 *order.CreateOrderReq) (*order.CreateOrderRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*order.CreateOrderRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersServerMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrdersServer)(nil).CreateOrder), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockOrdersServer) UpdateOrder(arg0 context.Context, arg1 *order.UpdateOrderReq) (*order.UpdateOrderRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(*order.UpdateOrderRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrdersServerMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrdersServer)(nil).UpdateOrder), arg0, arg1)
}

// mustEmbedUnimplementedOrdersServer mocks base method.
func (m *MockOrdersServer) mustEmbedUnimplementedOrdersServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrdersServer")
}

// mustEmbedUnimplementedOrdersServer indicates an expected call of mustEmbedUnimplementedOrdersServer.
func (mr *MockOrdersServerMockRecorder) mustEmbedUnimplementedOrdersServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrdersServer", reflect.TypeOf((*MockOrdersServer)(nil).mustEmbedUnimplementedOrdersServer))
}

// MockUnsafeOrdersServer is a mock of UnsafeOrdersServer interface.
type MockUnsafeOrdersServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOrdersServerMockRecorder
}

// MockUnsafeOrdersServerMockRecorder is the mock recorder for MockUnsafeOrdersServer.
type MockUnsafeOrdersServerMockRecorder struct {
	mock *MockUnsafeOrdersServer
}

// NewMockUnsafeOrdersServer creates a new mock instance.
func NewMockUnsafeOrdersServer(ctrl *gomock.Controller) *MockUnsafeOrdersServer {
	mock := &MockUnsafeOrdersServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOrdersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrdersServer) EXPECT() *MockUnsafeOrdersServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOrdersServer mocks base method.
func (m *MockUnsafeOrdersServer) mustEmbedUnimplementedOrdersServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrdersServer")
}

// mustEmbedUnimplementedOrdersServer indicates an expected call of mustEmbedUnimplementedOrdersServer.
func (mr *MockUnsafeOrdersServerMockRecorder) mustEmbedUnimplementedOrdersServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrdersServer", reflect.TypeOf((*MockUnsafeOrdersServer)(nil).mustEmbedUnimplementedOrdersServer))
}
