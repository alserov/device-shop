// Code generated by MockGen. DO NOT EDIT.
// Source: internal/broker/manager/txManager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/alserov/device-shop/order-service/internal/broker/manager/models"
	gomock "github.com/golang/mock/gomock"
)

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// CancelOrderTx mocks base method.
func (m *MockTxManager) CancelOrderTx(in models.CancelOrderTxBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrderTx", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrderTx indicates an expected call of CancelOrderTx.
func (mr *MockTxManagerMockRecorder) CancelOrderTx(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderTx", reflect.TypeOf((*MockTxManager)(nil).CancelOrderTx), in)
}

// CreateOrderTx mocks base method.
func (m *MockTxManager) CreateOrderTx(in models.CreateOrderTxBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockTxManagerMockRecorder) CreateOrderTx(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockTxManager)(nil).CreateOrderTx), in)
}
