// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/alserov/device-shop/order-service/internal/db"
	models "github.com/alserov/device-shop/order-service/internal/db/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepo is a mock of Repository interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// CancelOrderDevicesTx mocks base method.
func (m *MockOrderRepo) CancelOrderDevicesTx(ctx context.Context, orderUUID string) (db.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrderDevicesTx", ctx, orderUUID)
	ret0, _ := ret[0].(db.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrderDevicesTx indicates an expected call of CancelOrderDevicesTx.
func (mr *MockOrderRepoMockRecorder) CancelOrderDevicesTx(ctx, orderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderDevicesTx", reflect.TypeOf((*MockOrderRepo)(nil).CancelOrderDevicesTx), ctx, orderUUID)
}

// CancelOrderTx mocks base method.
func (m *MockOrderRepo) CancelOrderTx(ctx context.Context, orderUUID string) (db.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrderTx", ctx, orderUUID)
	ret0, _ := ret[0].(db.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrderTx indicates an expected call of CancelOrderTx.
func (mr *MockOrderRepoMockRecorder) CancelOrderTx(ctx, orderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderTx", reflect.TypeOf((*MockOrderRepo)(nil).CancelOrderTx), ctx, orderUUID)
}

// CheckOrder mocks base method.
func (m *MockOrderRepo) CheckOrder(ctx context.Context, orderUUID string) (models.CheckOrderRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrder", ctx, orderUUID)
	ret0, _ := ret[0].(models.CheckOrderRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrder indicates an expected call of CheckOrder.
func (mr *MockOrderRepoMockRecorder) CheckOrder(ctx, orderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrder", reflect.TypeOf((*MockOrderRepo)(nil).CheckOrder), ctx, orderUUID)
}

// CreateOrderTx mocks base method.
func (m *MockOrderRepo) CreateOrderTx(ctx context.Context, req models.CreateOrderReq) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", ctx, req)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockOrderRepoMockRecorder) CreateOrderTx(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockOrderRepo)(nil).CreateOrderTx), ctx, req)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepo) UpdateOrder(ctx context.Context, status, orderUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, status, orderUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepoMockRecorder) UpdateOrder(ctx, status, orderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepo)(nil).UpdateOrder), ctx, status, orderUUID)
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// GetTx mocks base method.
func (m *MockTx) GetTx() db.SqlTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx")
	ret0, _ := ret[0].(db.SqlTx)
	return ret0
}

// GetTx indicates an expected call of GetTx.
func (mr *MockTxMockRecorder) GetTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockTx)(nil).GetTx))
}

// Value mocks base method.
func (m *MockTx) Value() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockTxMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockTx)(nil).Value))
}

// MockSqlTx is a mock of SqlTx interface.
type MockSqlTx struct {
	ctrl     *gomock.Controller
	recorder *MockSqlTxMockRecorder
}

// MockSqlTxMockRecorder is the mock recorder for MockSqlTx.
type MockSqlTxMockRecorder struct {
	mock *MockSqlTx
}

// NewMockSqlTx creates a new mock instance.
func NewMockSqlTx(ctrl *gomock.Controller) *MockSqlTx {
	mock := &MockSqlTx{ctrl: ctrl}
	mock.recorder = &MockSqlTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlTx) EXPECT() *MockSqlTxMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockSqlTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSqlTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSqlTx)(nil).Commit))
}

// Rollback mocks base method.
func (m *MockSqlTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSqlTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSqlTx)(nil).Rollback))
}
