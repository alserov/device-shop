// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	models "github.com/alserov/device-shop/order-service/internal/db/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// CheckOrder mocks base method.
func (m *MockOrderRepo) CheckOrder(ctx context.Context, orderUUID string) (models.CheckOrderRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrder", ctx, orderUUID)
	ret0, _ := ret[0].(models.CheckOrderRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrder indicates an expected call of CheckOrder.
func (mr *MockOrderRepoMockRecorder) CheckOrder(ctx, orderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrder", reflect.TypeOf((*MockOrderRepo)(nil).CheckOrder), ctx, orderUUID)
}

// CreateOrderTx mocks base method.
func (m *MockOrderRepo) CreateOrderTx(ctx context.Context, req models.CreateOrderReq) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", ctx, req)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockOrderRepoMockRecorder) CreateOrderTx(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockOrderRepo)(nil).CreateOrderTx), ctx, req)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepo) UpdateOrder(ctx context.Context, status, orderUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, status, orderUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepoMockRecorder) UpdateOrder(ctx, status, orderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepo)(nil).UpdateOrder), ctx, status, orderUUID)
}
