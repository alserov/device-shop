// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: collection/collections.proto

package collection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectionsClient is the client API for Collections service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionsClient interface {
	AddToFavourite(ctx context.Context, in *ChangeCollectionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFromFavourite(ctx context.Context, in *ChangeCollectionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFavourite(ctx context.Context, in *GetCollectionReq, opts ...grpc.CallOption) (*GetCollectionRes, error)
	AddToCart(ctx context.Context, in *ChangeCollectionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFromCart(ctx context.Context, in *ChangeCollectionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCart(ctx context.Context, in *GetCollectionReq, opts ...grpc.CallOption) (*GetCollectionRes, error)
	RemoveDeviceFromCollections(ctx context.Context, in *RemoveDeletedDeviceReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type collectionsClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionsClient(cc grpc.ClientConnInterface) CollectionsClient {
	return &collectionsClient{cc}
}

func (c *collectionsClient) AddToFavourite(ctx context.Context, in *ChangeCollectionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/collection.Collections/AddToFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) RemoveFromFavourite(ctx context.Context, in *ChangeCollectionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/collection.Collections/RemoveFromFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) GetFavourite(ctx context.Context, in *GetCollectionReq, opts ...grpc.CallOption) (*GetCollectionRes, error) {
	out := new(GetCollectionRes)
	err := c.cc.Invoke(ctx, "/collection.Collections/GetFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) AddToCart(ctx context.Context, in *ChangeCollectionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/collection.Collections/AddToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) RemoveFromCart(ctx context.Context, in *ChangeCollectionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/collection.Collections/RemoveFromCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) GetCart(ctx context.Context, in *GetCollectionReq, opts ...grpc.CallOption) (*GetCollectionRes, error) {
	out := new(GetCollectionRes)
	err := c.cc.Invoke(ctx, "/collection.Collections/GetCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) RemoveDeviceFromCollections(ctx context.Context, in *RemoveDeletedDeviceReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/collection.Collections/RemoveDeviceFromCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionsServer is the server API for Collections service.
// All implementations must embed UnimplementedCollectionsServer
// for forward compatibility
type CollectionsServer interface {
	AddToFavourite(context.Context, *ChangeCollectionReq) (*emptypb.Empty, error)
	RemoveFromFavourite(context.Context, *ChangeCollectionReq) (*emptypb.Empty, error)
	GetFavourite(context.Context, *GetCollectionReq) (*GetCollectionRes, error)
	AddToCart(context.Context, *ChangeCollectionReq) (*emptypb.Empty, error)
	RemoveFromCart(context.Context, *ChangeCollectionReq) (*emptypb.Empty, error)
	GetCart(context.Context, *GetCollectionReq) (*GetCollectionRes, error)
	RemoveDeviceFromCollections(context.Context, *RemoveDeletedDeviceReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedCollectionsServer()
}

// UnimplementedCollectionsServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionsServer struct {
}

func (UnimplementedCollectionsServer) AddToFavourite(context.Context, *ChangeCollectionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToFavourite not implemented")
}
func (UnimplementedCollectionsServer) RemoveFromFavourite(context.Context, *ChangeCollectionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromFavourite not implemented")
}
func (UnimplementedCollectionsServer) GetFavourite(context.Context, *GetCollectionReq) (*GetCollectionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavourite not implemented")
}
func (UnimplementedCollectionsServer) AddToCart(context.Context, *ChangeCollectionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedCollectionsServer) RemoveFromCart(context.Context, *ChangeCollectionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromCart not implemented")
}
func (UnimplementedCollectionsServer) GetCart(context.Context, *GetCollectionReq) (*GetCollectionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedCollectionsServer) RemoveDeviceFromCollections(context.Context, *RemoveDeletedDeviceReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeviceFromCollections not implemented")
}
func (UnimplementedCollectionsServer) mustEmbedUnimplementedCollectionsServer() {}

// UnsafeCollectionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionsServer will
// result in compilation errors.
type UnsafeCollectionsServer interface {
	mustEmbedUnimplementedCollectionsServer()
}

func RegisterCollectionsServer(s grpc.ServiceRegistrar, srv CollectionsServer) {
	s.RegisterService(&Collections_ServiceDesc, srv)
}

func _Collections_AddToFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).AddToFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.Collections/AddToFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).AddToFavourite(ctx, req.(*ChangeCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_RemoveFromFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).RemoveFromFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.Collections/RemoveFromFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).RemoveFromFavourite(ctx, req.(*ChangeCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_GetFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).GetFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.Collections/GetFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).GetFavourite(ctx, req.(*GetCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.Collections/AddToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).AddToCart(ctx, req.(*ChangeCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_RemoveFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).RemoveFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.Collections/RemoveFromCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).RemoveFromCart(ctx, req.(*ChangeCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.Collections/GetCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).GetCart(ctx, req.(*GetCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_RemoveDeviceFromCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeletedDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).RemoveDeviceFromCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.Collections/RemoveDeviceFromCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).RemoveDeviceFromCollections(ctx, req.(*RemoveDeletedDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Collections_ServiceDesc is the grpc.ServiceDesc for Collections service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collections_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collection.Collections",
	HandlerType: (*CollectionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToFavourite",
			Handler:    _Collections_AddToFavourite_Handler,
		},
		{
			MethodName: "RemoveFromFavourite",
			Handler:    _Collections_RemoveFromFavourite_Handler,
		},
		{
			MethodName: "GetFavourite",
			Handler:    _Collections_GetFavourite_Handler,
		},
		{
			MethodName: "AddToCart",
			Handler:    _Collections_AddToCart_Handler,
		},
		{
			MethodName: "RemoveFromCart",
			Handler:    _Collections_RemoveFromCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _Collections_GetCart_Handler,
		},
		{
			MethodName: "RemoveDeviceFromCollections",
			Handler:    _Collections_RemoveDeviceFromCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collection/collections.proto",
}
