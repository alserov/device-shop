// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	models "github.com/alserov/device-shop/user-service/internal/db/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CheckIfAdmin mocks base method.
func (m *MockUserRepo) CheckIfAdmin(ctx context.Context, uuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfAdmin", ctx, uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfAdmin indicates an expected call of CheckIfAdmin.
func (mr *MockUserRepoMockRecorder) CheckIfAdmin(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfAdmin", reflect.TypeOf((*MockUserRepo)(nil).CheckIfAdmin), ctx, uuid)
}

// DebitBalance mocks base method.
func (m *MockUserRepo) DebitBalance(arg0 context.Context, arg1 models.BalanceReq) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitBalance", arg0, arg1)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitBalance indicates an expected call of DebitBalance.
func (mr *MockUserRepoMockRecorder) DebitBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitBalance", reflect.TypeOf((*MockUserRepo)(nil).DebitBalance), arg0, arg1)
}

// DebitBalanceTx mocks base method.
func (m *MockUserRepo) DebitBalanceTx(arg0 context.Context, arg1 models.BalanceReq) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitBalanceTx", arg0, arg1)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitBalanceTx indicates an expected call of DebitBalanceTx.
func (mr *MockUserRepoMockRecorder) DebitBalanceTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitBalanceTx", reflect.TypeOf((*MockUserRepo)(nil).DebitBalanceTx), arg0, arg1)
}

// GetInfo mocks base method.
func (m *MockUserRepo) GetInfo(arg0 context.Context, arg1 string) (models.GetUserInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0, arg1)
	ret0, _ := ret[0].(models.GetUserInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockUserRepoMockRecorder) GetInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockUserRepo)(nil).GetInfo), arg0, arg1)
}

// GetPasswordAndRoleByUsername mocks base method.
func (m *MockUserRepo) GetPasswordAndRoleByUsername(ctx context.Context, uname string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordAndRoleByUsername", ctx, uname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPasswordAndRoleByUsername indicates an expected call of GetPasswordAndRoleByUsername.
func (mr *MockUserRepoMockRecorder) GetPasswordAndRoleByUsername(ctx, uname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordAndRoleByUsername", reflect.TypeOf((*MockUserRepo)(nil).GetPasswordAndRoleByUsername), ctx, uname)
}

// GetUserInfo mocks base method.
func (m *MockUserRepo) GetUserInfo(ctx context.Context, uuid string) (models.GetUserInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, uuid)
	ret0, _ := ret[0].(models.GetUserInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserRepoMockRecorder) GetUserInfo(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserRepo)(nil).GetUserInfo), ctx, uuid)
}

// Login mocks base method.
func (m *MockUserRepo) Login(ctx context.Context, req models.LoginReq, rToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req, rToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserRepoMockRecorder) Login(ctx, req, rToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserRepo)(nil).Login), ctx, req, rToken)
}

// Signup mocks base method.
func (m *MockUserRepo) Signup(ctx context.Context, req models.SignupReq, info models.SignupInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, req, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockUserRepoMockRecorder) Signup(ctx, req, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserRepo)(nil).Signup), ctx, req, info)
}

// TopUpBalance mocks base method.
func (m *MockUserRepo) TopUpBalance(arg0 context.Context, arg1 models.BalanceReq) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopUpBalance", arg0, arg1)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopUpBalance indicates an expected call of TopUpBalance.
func (mr *MockUserRepoMockRecorder) TopUpBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopUpBalance", reflect.TypeOf((*MockUserRepo)(nil).TopUpBalance), arg0, arg1)
}

// MockInfoActions is a mock of InfoActions interface.
type MockInfoActions struct {
	ctrl     *gomock.Controller
	recorder *MockInfoActionsMockRecorder
}

// MockInfoActionsMockRecorder is the mock recorder for MockInfoActions.
type MockInfoActionsMockRecorder struct {
	mock *MockInfoActions
}

// NewMockInfoActions creates a new mock instance.
func NewMockInfoActions(ctrl *gomock.Controller) *MockInfoActions {
	mock := &MockInfoActions{ctrl: ctrl}
	mock.recorder = &MockInfoActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoActions) EXPECT() *MockInfoActionsMockRecorder {
	return m.recorder
}

// GetInfo mocks base method.
func (m *MockInfoActions) GetInfo(arg0 context.Context, arg1 string) (models.GetUserInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0, arg1)
	ret0, _ := ret[0].(models.GetUserInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockInfoActionsMockRecorder) GetInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockInfoActions)(nil).GetInfo), arg0, arg1)
}

// GetUserInfo mocks base method.
func (m *MockInfoActions) GetUserInfo(ctx context.Context, uuid string) (models.GetUserInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, uuid)
	ret0, _ := ret[0].(models.GetUserInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockInfoActionsMockRecorder) GetUserInfo(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockInfoActions)(nil).GetUserInfo), ctx, uuid)
}

// MockBalanceActions is a mock of BalanceActions interface.
type MockBalanceActions struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceActionsMockRecorder
}

// MockBalanceActionsMockRecorder is the mock recorder for MockBalanceActions.
type MockBalanceActionsMockRecorder struct {
	mock *MockBalanceActions
}

// NewMockBalanceActions creates a new mock instance.
func NewMockBalanceActions(ctrl *gomock.Controller) *MockBalanceActions {
	mock := &MockBalanceActions{ctrl: ctrl}
	mock.recorder = &MockBalanceActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceActions) EXPECT() *MockBalanceActionsMockRecorder {
	return m.recorder
}

// DebitBalance mocks base method.
func (m *MockBalanceActions) DebitBalance(arg0 context.Context, arg1 models.BalanceReq) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitBalance", arg0, arg1)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitBalance indicates an expected call of DebitBalance.
func (mr *MockBalanceActionsMockRecorder) DebitBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitBalance", reflect.TypeOf((*MockBalanceActions)(nil).DebitBalance), arg0, arg1)
}

// DebitBalanceTx mocks base method.
func (m *MockBalanceActions) DebitBalanceTx(arg0 context.Context, arg1 models.BalanceReq) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitBalanceTx", arg0, arg1)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitBalanceTx indicates an expected call of DebitBalanceTx.
func (mr *MockBalanceActionsMockRecorder) DebitBalanceTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitBalanceTx", reflect.TypeOf((*MockBalanceActions)(nil).DebitBalanceTx), arg0, arg1)
}

// TopUpBalance mocks base method.
func (m *MockBalanceActions) TopUpBalance(arg0 context.Context, arg1 models.BalanceReq) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopUpBalance", arg0, arg1)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopUpBalance indicates an expected call of TopUpBalance.
func (mr *MockBalanceActionsMockRecorder) TopUpBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopUpBalance", reflect.TypeOf((*MockBalanceActions)(nil).TopUpBalance), arg0, arg1)
}

// MockAuthActions is a mock of AuthActions interface.
type MockAuthActions struct {
	ctrl     *gomock.Controller
	recorder *MockAuthActionsMockRecorder
}

// MockAuthActionsMockRecorder is the mock recorder for MockAuthActions.
type MockAuthActionsMockRecorder struct {
	mock *MockAuthActions
}

// NewMockAuthActions creates a new mock instance.
func NewMockAuthActions(ctrl *gomock.Controller) *MockAuthActions {
	mock := &MockAuthActions{ctrl: ctrl}
	mock.recorder = &MockAuthActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthActions) EXPECT() *MockAuthActionsMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthActions) Login(ctx context.Context, req models.LoginReq, rToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req, rToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthActionsMockRecorder) Login(ctx, req, rToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthActions)(nil).Login), ctx, req, rToken)
}

// Signup mocks base method.
func (m *MockAuthActions) Signup(ctx context.Context, req models.SignupReq, info models.SignupInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, req, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockAuthActionsMockRecorder) Signup(ctx, req, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockAuthActions)(nil).Signup), ctx, req, info)
}

// MockInternalActions is a mock of InternalActions interface.
type MockInternalActions struct {
	ctrl     *gomock.Controller
	recorder *MockInternalActionsMockRecorder
}

// MockInternalActionsMockRecorder is the mock recorder for MockInternalActions.
type MockInternalActionsMockRecorder struct {
	mock *MockInternalActions
}

// NewMockInternalActions creates a new mock instance.
func NewMockInternalActions(ctrl *gomock.Controller) *MockInternalActions {
	mock := &MockInternalActions{ctrl: ctrl}
	mock.recorder = &MockInternalActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternalActions) EXPECT() *MockInternalActionsMockRecorder {
	return m.recorder
}

// CheckIfAdmin mocks base method.
func (m *MockInternalActions) CheckIfAdmin(ctx context.Context, uuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfAdmin", ctx, uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfAdmin indicates an expected call of CheckIfAdmin.
func (mr *MockInternalActionsMockRecorder) CheckIfAdmin(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfAdmin", reflect.TypeOf((*MockInternalActions)(nil).CheckIfAdmin), ctx, uuid)
}

// GetPasswordAndRoleByUsername mocks base method.
func (m *MockInternalActions) GetPasswordAndRoleByUsername(ctx context.Context, uname string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordAndRoleByUsername", ctx, uname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPasswordAndRoleByUsername indicates an expected call of GetPasswordAndRoleByUsername.
func (mr *MockInternalActionsMockRecorder) GetPasswordAndRoleByUsername(ctx, uname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordAndRoleByUsername", reflect.TypeOf((*MockInternalActions)(nil).GetPasswordAndRoleByUsername), ctx, uname)
}
